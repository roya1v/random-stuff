import org.jetbrains.kotlin.cli.jvm.main
import java.nio.file.Files

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
}

val sharedSPM = "../shared"

val compileSwiftJExtractPlugin = tasks.register<Exec>("compileSwiftJExtractPlugin") {
    description = "Rebuild the swift-java root project"

    inputs.file(File(rootDir, "$sharedSPM/Package.swift"))
    inputs.dir(File(rootDir, "$sharedSPM/Sources"))
    outputs.dir(File(rootDir, "$sharedSPM/.build"))

    workingDir = rootDir
    commandLine("swift")
    args(
        "build",
        "--product", "SwiftKitSwift",
        "--product", "JExtractSwiftPlugin",
        "--product", "JExtractSwiftCommandPlugin"
    )
}

val jextract = tasks.register<Exec>("jextract") {
    description = "Builds swift sources, including swift-java source generation"
    dependsOn("compileSwiftJExtractPlugin")

    // only because we depend on "live developing" the plugin while using this project to test it
    inputs.file(File(rootDir, "$sharedSPM/Package.swift"))
    inputs.dir(File(rootDir, "$sharedSPM/Sources"))

    inputs.file(File(projectDir, "$sharedSPM/Package.swift"))
    inputs.dir(File(projectDir, "$sharedSPM/Sources"))

    // TODO: we can use package describe --type json to figure out which targets depend
    // on JExtractSwiftPlugin and will produce outputs
    // Avoid adding this directory, but create the expected one specifically for all targets
    // which WILL produce sources because they have the plugin
    outputs.dir(layout.buildDirectory.dir("$sharedSPM/../.build/plugins/outputs/${layout.projectDirectory.asFile.name.lowercase()}"))

    val baseSwiftPluginOutputsDir = layout.buildDirectory.dir("$sharedSPM/../.build/plugins/outputs/").get().asFile
    if (!baseSwiftPluginOutputsDir.exists()) {
        baseSwiftPluginOutputsDir.mkdirs()
    }

    Files.walk(layout.buildDirectory.dir("$sharedSPM/../.build/plugins/outputs/").get().asFile.toPath()).forEach {
        // Add any Java sources generated by the plugin to our sourceSet
        if (it.endsWith("JExtractSwiftPlugin/src/generated/java")) {
            outputs.dir(it)
        }
    }

    workingDir = layout.projectDirectory.dir("../").asFile
    commandLine("swift")
    args("package", "jextract", "-v", "--log-level", "info") // TODO: pass log level from Gradle build
}

android {
    namespace = "com.example.dataloggingsdkapp"
    compileSdk = 35

    defaultConfig {
        applicationId = "com.example.dataloggingsdkapp"
        minSdk = 29
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.1"
    }
    packaging {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
    sourceSets {
        getByName("main") {
            java {
                srcDir(jextract)
            }
        }
    }
}
//java.sourceSets["main"].java {
//    srcDir(jextract)
//}
tasks.build {
    dependsOn("jextract")
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)
}